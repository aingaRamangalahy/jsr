name: Deploy to VPS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            cd apps/jsr
            
            # Update code
            git pull origin master

            # Make sure .env file exists for Docker Compose to use
            if [ ! -f .env ]; then
              echo "Creating .env file from template"
              cp env.example .env
              
              # Set required environment variables
              sed -i "s|MONGODB_ATLAS_URI=.*|MONGODB_ATLAS_URI=${{ secrets.MONGODB_ATLAS_URI }}|g" .env
              sed -i "s|JWT_SECRET=.*|JWT_SECRET=${{ secrets.JWT_SECRET }}|g" .env
              sed -i "s|SUPABASE_URL=.*|SUPABASE_URL=${{ secrets.SUPABASE_URL }}|g" .env
              sed -i "s|SUPABASE_ANON_KEY=.*|SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}|g" .env
              sed -i "s|SUPABASE_SERVICE_ROLE_KEY=.*|SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}|g" .env
              sed -i "s|API_URL=.*|API_URL=https://api.jsresources.dev|g" .env
              sed -i "s|DOMAIN_NAME=.*|DOMAIN_NAME=jsresources.dev|g" .env
              sed -i "s|ADMIN_EMAIL=.*|ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}|g" .env
              sed -i "s|NODE_ENV=.*|NODE_ENV=production|g" .env
            else
              # Update the .env file with the latest production values
              sed -i "s|MONGODB_ATLAS_URI=.*|MONGODB_ATLAS_URI=${{ secrets.MONGODB_ATLAS_URI }}|g" .env
              sed -i "s|JWT_SECRET=.*|JWT_SECRET=${{ secrets.JWT_SECRET }}|g" .env
              sed -i "s|SUPABASE_URL=.*|SUPABASE_URL=${{ secrets.SUPABASE_URL }}|g" .env
              sed -i "s|SUPABASE_ANON_KEY=.*|SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}|g" .env
              sed -i "s|SUPABASE_SERVICE_ROLE_KEY=.*|SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}|g" .env
              sed -i "s|NODE_ENV=.*|NODE_ENV=production|g" .env
            fi
            
            # Create Nginx config files if they don't exist
            if [ ! -f "frontend/nginx.conf" ] && [ -f "frontend/nginx.conf.template" ]; then
              cp frontend/nginx.conf.template frontend/nginx.conf
            fi

            if [ ! -f "admin/nginx.conf" ] && [ -f "admin/nginx.conf.template" ]; then
              cp admin/nginx.conf.template admin/nginx.conf
            fi
            
            # Build and start services with BuildKit enabled
            export DOCKER_BUILDKIT=1
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml build --no-cache
            docker compose -f docker-compose.prod.yml up -d
            
            # Clean up unused Docker resources
            docker system prune -af --volumes
            
            # Update Nginx configuration if needed
            if [ -f nginx-host-config.conf ] && [ -x "$(command -v sudo)" ]; then
              echo "Updating Nginx configuration..."
              sudo cp nginx-host-config.conf /etc/nginx/sites-available/jsresources
              
              if [ ! -f /etc/nginx/sites-enabled/jsresources ]; then
                sudo ln -s /etc/nginx/sites-available/jsresources /etc/nginx/sites-enabled/
              fi
              
              if [ -f /etc/nginx/sites-enabled/default ]; then
                sudo rm /etc/nginx/sites-enabled/default
              fi
              
              if ! sudo certbot certificates | grep -q "admin.jsresources.dev"; then
                sudo certbot --nginx -d jsresources.dev -d api.jsresources.dev -d admin.jsresources.dev
              fi
              
              sudo systemctl reload nginx
            fi
            
            # Final disk space check
            df -h /
          ENDSSH